"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

from config import BOT_TOKEN, SCHEDULE_TIME, TIMEZONE
from user_data import UserDataManager
from schedule_parser import ScheduleParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫—É–∫–∏
class UserStates(StatesGroup):
    waiting_for_cookies = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
            [KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏")],
            [KeyboardButton(text="‚è∞ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.user_manager = UserDataManager()
        self.schedule_parser = ScheduleParser()
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone(TIMEZONE))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self._setup_scheduler()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.handle_cookies_input, StateFilter(UserStates.waiting_for_cookies))
        self.dp.message.register(self.handle_text_messages, F.text)
    
    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        hour, minute = map(int, SCHEDULE_TIME.split(':'))
        
        self.scheduler.add_job(
            self.send_schedule_to_all,
            CronTrigger(hour=hour, minute=minute, timezone=pytz.timezone(TIMEZONE)),
            id='daily_schedule',
            replace_existing=True
        )
        
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {SCHEDULE_TIME} ({TIMEZONE})")
    
    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not message.from_user:
            return
        
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = self.user_manager.get_user_data(user_id)
        user_data.update({
            'username': username,
            'first_name': message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            'last_seen': datetime.now().isoformat()
        })
        self.user_manager.save_user_data(user_id, user_data)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞.\n\n"
            "üìã –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 7:00 –ú–°–ö\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤\n\n"
            "‚öôÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏ —Ñ–∞–π–ª—ã –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
        
        await message.answer(welcome_text, reply_markup=get_main_keyboard())
    
    async def cmd_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–∫–∏:</b>\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ EditThisCookie\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ cookie=–∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "5. –ù—É–∂–Ω—ã: ej-esia_v2; jwt_v_2; ej_id;\n"
            "6. –¢–∞–∫–∂–µ –Ω—É–∂–Ω—ã: CSRF-TOKEN; ej_check\n"
            "7. –í—Å—Ç–∞–≤—å—Ç–µ –∫—É–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π ;\n"
            "8. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏\"\n\n"
            
            "üìö <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ \"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\" - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ \"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\" - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å\n"
            "‚Ä¢ \"‚è∞ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\" - –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ\n"
            "‚Ä¢ \"üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\" - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            "–ö—É–∫–∏ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —É—Å—Ç–∞—Ä–µ–≤–∞—Ç—å. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±–Ω–æ–≤–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ."
        )
        
        await message.answer(help_text, parse_mode="HTML")
    
    async def handle_text_messages(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.from_user or not message.text:
            return
        
        text = message.text
        user_id = message.from_user.id
        
        if text in ["üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"]:
            await self.check_schedule(message, days_offset=0)
        
        elif text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
            await self.check_schedule(message, days_offset=1)
        
        elif text == "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏":
            await self.setup_cookies(message, state)
        
        elif text == "‚è∞ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            await self.enable_notifications(message)
        
        elif text == "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            await self.disable_notifications(message)
        
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.cmd_help(message)
        
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
    
    async def setup_cookies(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–∫–∏"""
        instruction_text = (
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–∫–∏ —Ñ–∞–π–ª–æ–≤</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫—É–∫–∏ –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>session_id=abc123; auth_token=xyz789; user_data=example</code>\n\n"
            "üí° –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help"
        )
        
        await message.answer(instruction_text, parse_mode="HTML")
        await state.set_state(UserStates.waiting_for_cookies)
    
    async def handle_cookies_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—É–∫–∏"""
        if not message.from_user or not message.text:
            return
        
        cookies = message.text.strip()
        user_id = message.from_user.id
        
        if not cookies or len(cookies) < 10:
            await message.answer("‚ùå –ö—É–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏
        self.user_manager.save_user_cookies(user_id, cookies)
        
        await message.answer(
            "‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        
        await state.clear()
    
    async def check_schedule(self, message: Message, days_offset: int = 0):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days_offset: –°–º–µ—â–µ–Ω–∏–µ –≤ –¥–Ω—è—Ö (0 - —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞, –∏ —Ç.–¥.)
        """
        if not message.from_user:
            return
        
        user_id = message.from_user.id
        
        if not self.user_manager.user_has_cookies(user_id):
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—É–∫–∏ —Ñ–∞–π–ª—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏\""
            )
            return
        
        if days_offset == 0:
            await message.answer("üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
        elif days_offset == 1:
            await message.answer("üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        else:
            await message.answer(f"üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days_offset} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥...")
        
        try:
            cookies = self.user_manager.get_user_cookies(user_id)
            if not cookies:
                await message.answer(
                    "‚ùå –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—É–∫–∏ —Ñ–∞–π–ª—ã!"
                )
                return
            
            schedule = await self.schedule_parser.get_schedule(cookies, days_offset=days_offset)
            
            if schedule:
                await message.answer(schedule, parse_mode="HTML")
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –∫—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö."
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def enable_notifications(self, message: Message):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not message.from_user:
            return
        
        user_id = message.from_user.id
        
        if not self.user_manager.user_has_cookies(user_id):
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—É–∫–∏ —Ñ–∞–π–ª—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∫–∏\""
            )
            return
        
        self.user_manager.enable_schedule(user_id)
        
        await message.answer(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n"
            f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {SCHEDULE_TIME} (–ú–°–ö) —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
        )
    
    async def disable_notifications(self, message: Message):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not message.from_user:
            return
        
        user_id = message.from_user.id
        self.user_manager.disable_schedule(user_id)
        
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    
    async def send_schedule_to_all(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        active_users = self.user_manager.get_all_users_with_schedule()
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        for user_id in active_users:
            try:
                cookies = self.user_manager.get_user_cookies(user_id)
                if not cookies:
                    continue
                
                schedule = await self.schedule_parser.get_schedule(cookies, days_offset=days_offset)
                
                if schedule:
                    await self.bot.send_message(
                        user_id,
                        f"üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{schedule}",
                        parse_mode="HTML"
                    )
                    logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    await self.bot.send_message(
                        user_id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–∫–∏."
                    )
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()


if __name__ == "__main__":
    try:
        bot = TelegramBot()
        asyncio.run(bot.start_bot())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")